version: '3.8'
name: vascomart

services:

  ## ===================== Postgres Databases =====================
  db-users:
    container_name: db-users
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - db-pgdata-users:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - vascomart

  db-inventory:
    container_name: db-inventory
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    volumes:
      - db-pgdata-inventory:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - vascomart

  db-reviews:
    container_name: db-reviews
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reviews
    volumes:
      - db-pgdata-reviews:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    restart: unless-stopped
    networks:
      - vascomart

  db-orders:
    container_name: db-orders
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    volumes:
      - db-pgdata-orders:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    restart: unless-stopped
    networks:
      - vascomart

  ## ===================== Service Discovery =====================
  eureka-service:
    container_name: eureka-service
    build:
      context: ../eureka-service
    image: vascomart/eureka-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    restart: unless-stopped
    networks:
      - vascomart

  ## ===================== Gateway =====================
  api-gateway:
    container_name: api-gateway
    build:
      context: ../api-gateway
    image: vascomart/api-gateway
    ports:
      - "8087:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - eureka-service
    restart: unless-stopped
    networks:
      - vascomart

  ## ===================== Microservices =====================
  user-service:
    container_name: user-service
    build:
      context: ../user-service
    image: vascomart/user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - db-users
      - eureka-service
    restart: unless-stopped
    networks:
      - vascomart

  auth-service:
    container_name: auth-service
    build:
      context: ../auth-service
    image: vascomart/auth-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - user-service
      - eureka-service
    restart: unless-stopped
    networks:
      - vascomart

  inventory-service:
    container_name: inventory-service
    build:
      context: ../inventory-service
    image: vascomart/inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - db-inventory
      - eureka-service
    restart: unless-stopped
    networks:
      - vascomart

  order-service:
    container_name: order-service
    build:
      context: ../order-service
    image: vascomart/order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - db-orders
      - broker
      - eureka-service
    restart: unless-stopped
    networks:
      - vascomart

  reviews-service:
    container_name: reviews-service
    build:
      context: ../reviews-service
    image: vascomart/reviews-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - db-reviews
      - eureka-service
    restart: unless-stopped
    networks:
      - vascomart

  notification-service:
    container_name: notification-service
    build:
      context: ../notification-service
    image: vascomart/notification-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - eureka-service
    restart: unless-stopped
    networks:
      - vascomart

  ## ===================== Kafka + Zookeeper =====================
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    networks:
      - vascomart

  broker:
    container_name: kafka-broker
    image: confluentinc/cp-kafka:latest
    expose:
      - "29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: unless-stopped
    networks:
      - vascomart

  init-broker:
    container_name: kafka-init
    image: confluentinc/cp-kafka:latest
    depends_on:
      - broker
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      kafka-topics --bootstrap-server kafka-broker:29092 --list
      echo 'Creating Kafka topic: order.created.v1'
      kafka-topics --bootstrap-server kafka-broker:29092 --create --if-not-exists --topic order.created.v1
      kafka-topics --bootstrap-server kafka-broker:29092 --list
      "
    networks:
      - vascomart

  ## ===================== Observability =====================
  # otel-collector:
  #   container_name: otel-collector
  #   image: otel/opentelemetry-collector-contrib:0.96.0
  #   command:
  #     - --config=/etc/otelcol-contrib/otel-collector.yaml
  #   volumes:
  #     - ./otel-collector/otel-collector.yaml:/etc/otelcol-contrib/otel-collector.yaml
  #   restart: unless-stopped
  #   networks:
  #     - vascomart

  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yaml
  #   volumes:
  #     - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
  #   restart: unless-stopped
  #   networks:
  #     - vascomart

  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
  #   restart: unless-stopped
  #   networks:
  #     - vascomart

  # loki:
  #   container_name: loki
  #   image: grafana/loki:latest
  #   command: -config.file=/etc/loki/local-config.yaml
  #   ports:
  #     - "3100:3100"
  #   restart: unless-stopped
  #   networks:
  #     - vascomart

  # zipkin:
  #   container_name: zipkin
  #   image: openzipkin/zipkin
  #   ports:
  #     - "9411:9411"
  #   restart: unless-stopped
  #   networks:
  #     - vascomart

  # tempo:
  #   container_name: tempo
  #   image: grafana/tempo:latest
  #   command: [ "-config.file=/etc/tempo.yaml" ]
  #   volumes:
  #     - ./tempo/tempo.yaml:/etc/tempo.yaml
  #   ports:
  #     - "3200:3200"
  #   restart: unless-stopped
  #   networks:
  #     - vascomart

## ===================== Volumes =====================
volumes:
  db-pgdata-users:
  db-pgdata-inventory:
  db-pgdata-reviews:
  db-pgdata-orders:

## ===================== Networks =====================
networks:
  vascomart:
    driver: bridge
